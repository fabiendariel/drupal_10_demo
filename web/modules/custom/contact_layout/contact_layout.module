<?php

/**
 * @file
 * Contact Layout module hooks.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function contact_layout_theme() {
  return [
    'contact_layout_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible email templates that this module can
 * send. Each email is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from MailManager::mail(). The
 * goal of hook_mail() is to set the message's 'subject' and 'body' properties,
 * as well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of MailManager::mail(). So
 * it's a callback of a type, but not a hook.
 */
function contact_layout_mail($key, &$message, $params) {
  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of email being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    // Send a simple message from the contact form.
    case 'contact_message':
      $message['subject'] = t('Contact Layout submission', $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name (@email) sent you the following message:', [
        '@name' => $params['name'],
        '@email' => $params['email'],
      ], $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

/**
 * Implements hook_mail_alter().
 *
 * This function is not required to send an email using Drupal's mail system.
 *
 * hook_mail_alter() provides an interface to alter any aspect of email sent by
 * Drupal. You can use this hook to add a common site footer to all outgoing
 * email, add extra header fields, and/or modify the email in any way.
 * Converting the outgoing email to HTML is one possibility.
 */
function contact_layout_mail_alter(&$message) {
  // For the purpose of this example, modify all the outgoing messages and
  // attach a site signature. The signature will be translated to the language
  // in which message was built.
  $options = [
    'langcode' => $message['langcode'],
  ];

  $signature = t("\n--\nMail altered by email_example module.", [], $options);
  if (is_array($message['body'])) {
    $message['body'][] = $signature;
  }
  else {
    // Some modules use the body as a string, erroneously.
    $message['body'] .= $signature;
  }
}

/**
 * Implements hook_form_BASE_FROM_ID_alter().
 */
function contact_layout_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $current_node_type = $node->getType();
  $contact_layout_config = \Drupal::config('contact_layout.settings');
  $allowed_types = $contact_layout_config->get('allowed_types');

  if (in_array($current_node_type, $allowed_types)) {
    $form['contact_layout_form'] = [
      '#type' => 'details',
      '#title' => t('Contact Layout Collection'),
      '#access' => \Drupal::currentUser()->hasPermission('administer contact_layout'),
      '#group' => 'advanced',
      '#weight' => 50,
    ];

    $enabler = \Drupal::service('contact_layout.enabler');
    $form['contact_layout_form']['contact_layout_enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Collect Contact Layout Form submissions for this node.'),
      '#default_value' => $enabler->isEnabled($node),
    ];

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
        $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'contact_layout_form_node_form_submit';
      }
    }
  }
}

/**
 * Form submission handler for Contact Layout item field on the node form.
 * @see contact_layout_form_node_form_alter()
 *
 * @param array $form
 * @param Drupal\Core\Form\FormStateInterface $form_state
 */
function contact_layout_form_node_form_submit($form, FormStateInterface $form_state) {

  // Initiate the Contact Layout enabler service once created
  $enabler = \Drupal::service('contact_layout.enabler');

  $node = $form_state->getFormObject()->getEntity();

  if ($form_state->getValue('contact_layout_enabled')) {
    // Use Contact Layout enabler service to activate Contact Layout Form on this node
    $enabler->setEnabled($node);
  }
  else {
    // Use Contact Layout enabler service to disable Contact Layout Form on this node
    $enabler->delEnabled($node);
  }
}
